apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: {{ .Release.Namespace }}
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      socket_path = "/tmp/spire-server/private/api.sock"
      trust_domain = "{{ .Values.partnerTrustDomain }}"
      data_dir = "/run/spire/data"
      log_level = "INFO"
      #AWS requires the use of RSA.  EC cryptography is not supported
      ca_key_type = "rsa-2048"

      federation {
        bundle_endpoint {
          address = "0.0.0.0"
          port = "{{ .Values.federation.bindPort }}"
          {{- if .Values.federation.letsencrypt }}
          acme {
              domain_name = "{{ .Values.federation.service.hostname }}"
              email = "{{ .Values.federation.service.admin_email }}"
              tos_accepted = true
          }
          {{- end }}
        }

        federates_with "{{ .Values.carelon.spire.trustDomain }}" {
          bundle_endpoint_url = "{{ .Values.carelon.spire.bundle_endpoint_url }}"
          bundle_endpoint_profile "https_web" {}
        }
      }

      default_svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["SPIFFE"],
        common_name = "",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "{{ .Values.clusterName }}" = {
              use_token_review_api_validation = true
              service_account_allow_list = ["{{ .Release.Namespace }}:spire-agent"]
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "{{ .Release.Namespace }}"
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }